const express = require('express');
const router = express.Router();
const { ApolloServer, gql } = require('apollo-server-express');
const axios = require('axios');
const User = require('../model/userSchema'); // Import User model

const typeDefs = require('../schema'); // Import your GraphQL schema
const resolvers = require('./resolvers'); // Import your GraphQL resolvers
const server = new ApolloServer({ typeDefs, resolvers }); // Create ApolloServer instance

// Login route handler
router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    // Fetch user from MongoDB using Mongoose
    const user = await User.findOne({ email });

    // If user doesn't exist or password doesn't match, return 401
    if (!user || user.password !== password) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    // If credentials are correct, return success message and user data
    res.status(200).json({ message: 'Login successful', user });
  } catch (err) {
    console.error('Error in login:', err);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Example logout route
router.post('/logout', async (req, res) => {
  try {
    // Perform logout logic here if needed
    res.status(200).send({ message: 'Logged out successfully' });
  } catch (err) {
    res.status(500).send({ message: err.message });
  }
});

module.exports = router;
